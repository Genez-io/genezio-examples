<resources>
    <string name="app_name">Android Basic Tutorials</string>

    <string name="listview">A list view is an adapter view that does not know the details, such as type and contents, of the views it contains.
        Instead list view requests views on demand from a ListAdapter as needed, such as to display new views as the
        user scrolls up or down. In order to display items in the list, call setAdapter(android.widget.ListAdapter)
        to associate an adapter with the list. For a simple example, see the discussion of filling an adapter view
        with text in the Layouts guide.</string>

    <string name="checkbox">Checkboxes allow the user to select one or more options from a set.
        Typically, you should present each checkbox option in a vertical list. To create each checkbox option,
        create a CheckBox in your layout. Because a set of checkbox options allows the user to select multiple items,
        each checkbox is managed separately and you must register a click listener for each one.</string>

    <string name="imageview">ImageView class is used to display any kind of image resource in the android application
        either it can be android.graphics.Bitmap or android.graphics.drawable.Drawable
        (it is a general abstraction for anything that can be drawn in Android).
        ImageView class or android.widget.ImageView inherits the android.view.View class which is the subclass
        of Kotlin. AnyClass.Application of ImageView is also in applying tints to an image in order to reuse a
        drawable resource and create overlays on background images. Moreover, ImageView is also used to control
        the size and movement of an image.</string>

    <string name="toggle">A toggle button allows the user to change a setting between two states.
        You can add a basic toggle button to your layout with the ToggleButton object.
        Android 4.0 (API level 14) introduces another kind of toggle button called a switch that provides
        a slider control, which you can add with a Switch object.</string>

    <string name="date">A thin wrapper around a millisecond value that allows JDBC to identify this as an SQL DATE
        value. A milliseconds value represents the number of milliseconds that have passed since January 1, 1970 00:00:00.000 GMT.
        To conform with the definition of SQL DATE, the millisecond values wrapped by a java.sql.Date instance
        must be normalized by setting the hours, minutes, seconds, and milliseconds to zero in the particular time zone with which the instance is associated.
        </string>

    <string name="rating">A RatingBar is an extension of SeekBar and ProgressBar that shows a rating in stars.
        The user can touch/drag or use arrow keys to set the rating when using the default size RatingBar.
        The smaller RatingBar style ( R.attr.ratingBarStyleSmall) and the larger indicator-only style
        (R.attr.ratingBarStyleIndicator) do not support user interaction and should only be used as indicators.
        When using a RatingBar that supports user interaction, placing widgets to the left or right of the
        RatingBar is discouraged.</string>

    <string name="time">A thin wrapper around the java.util.Date class that allows the JDBC API to identify
        this as an SQL TIME value. The Time class adds formatting and parsing operations to support the JDBC
        escape syntax for time values.
        The date components should be set to the "zero epoch" value of January 1, 1970 and should not be accessed.
        </string>

    <string name="textview">A TextView displays text to the user and optionally allows them to edit it.
        A TextView is a complete text editor, however the basic class is configured to not allow editing.
        </string>

    <string name="edit">A TextView displays text to the user and optionally allows them to edit it.
        A TextView is a complete text editor, however the basic class is configured to not allow editing.
        </string>

    <string name="camera">The Android framework includes support for various cameras and camera features available on devices, allowing you to capture pictures and videos in your applications.This document discusses a quick, simple approach to image and video capture and outlines an advanced approach for creating custom camera experiences for your users.</string>

</resources>